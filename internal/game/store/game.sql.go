// Code generated by sqlc. DO NOT EDIT.
// source: game.sql

package store

import (
	"context"
)

const endGame = `-- name: EndGame :one
UPDATE games
SET finished = true
WHERE namespace = $1 AND channel_id = $2
RETURNING namespace, room_id, channel_id, potato_kind, heat_level, holder_user_id, turns, finished, created_at
`

type EndGameParams struct {
	Namespace string
	ChannelID string
}

func (q *Queries) EndGame(ctx context.Context, arg EndGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, endGame, arg.Namespace, arg.ChannelID)
	var i Game
	err := row.Scan(
		&i.Namespace,
		&i.RoomID,
		&i.ChannelID,
		&i.PotatoKind,
		&i.HeatLevel,
		&i.HolderUserID,
		&i.Turns,
		&i.Finished,
		&i.CreatedAt,
	)
	return i, err
}

const getGame = `-- name: GetGame :one
SELECT namespace, room_id, channel_id, potato_kind, heat_level, holder_user_id, turns, finished, created_at FROM games
WHERE namespace = $1 AND channel_id = $2
LIMIT 1
`

type GetGameParams struct {
	Namespace string
	ChannelID string
}

func (q *Queries) GetGame(ctx context.Context, arg GetGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, arg.Namespace, arg.ChannelID)
	var i Game
	err := row.Scan(
		&i.Namespace,
		&i.RoomID,
		&i.ChannelID,
		&i.PotatoKind,
		&i.HeatLevel,
		&i.HolderUserID,
		&i.Turns,
		&i.Finished,
		&i.CreatedAt,
	)
	return i, err
}

const increaseHeatLevel = `-- name: IncreaseHeatLevel :one
UPDATE games
SET heat_level = heat_level + $3::int
WHERE namespace = $1 AND channel_id = $2
RETURNING namespace, room_id, channel_id, potato_kind, heat_level, holder_user_id, turns, finished, created_at
`

type IncreaseHeatLevelParams struct {
	Namespace string
	ChannelID string
	Amount    int32
}

func (q *Queries) IncreaseHeatLevel(ctx context.Context, arg IncreaseHeatLevelParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, increaseHeatLevel, arg.Namespace, arg.ChannelID, arg.Amount)
	var i Game
	err := row.Scan(
		&i.Namespace,
		&i.RoomID,
		&i.ChannelID,
		&i.PotatoKind,
		&i.HeatLevel,
		&i.HolderUserID,
		&i.Turns,
		&i.Finished,
		&i.CreatedAt,
	)
	return i, err
}

const incrementTurns = `-- name: IncrementTurns :one
UPDATE games
SET turns = turns + 1
WHERE namespace = $1 AND channel_id = $2
RETURNING namespace, room_id, channel_id, potato_kind, heat_level, holder_user_id, turns, finished, created_at
`

type IncrementTurnsParams struct {
	Namespace string
	ChannelID string
}

func (q *Queries) IncrementTurns(ctx context.Context, arg IncrementTurnsParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, incrementTurns, arg.Namespace, arg.ChannelID)
	var i Game
	err := row.Scan(
		&i.Namespace,
		&i.RoomID,
		&i.ChannelID,
		&i.PotatoKind,
		&i.HeatLevel,
		&i.HolderUserID,
		&i.Turns,
		&i.Finished,
		&i.CreatedAt,
	)
	return i, err
}

const updateHolder = `-- name: UpdateHolder :one
UPDATE games
SET holder_user_id = $3
WHERE namespace = $1 AND channel_id = $2
RETURNING namespace, room_id, channel_id, potato_kind, heat_level, holder_user_id, turns, finished, created_at
`

type UpdateHolderParams struct {
	Namespace    string
	ChannelID    string
	HolderUserID string
}

func (q *Queries) UpdateHolder(ctx context.Context, arg UpdateHolderParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, updateHolder, arg.Namespace, arg.ChannelID, arg.HolderUserID)
	var i Game
	err := row.Scan(
		&i.Namespace,
		&i.RoomID,
		&i.ChannelID,
		&i.PotatoKind,
		&i.HeatLevel,
		&i.HolderUserID,
		&i.Turns,
		&i.Finished,
		&i.CreatedAt,
	)
	return i, err
}

const upsertGame = `-- name: UpsertGame :one
INSERT INTO games (
  namespace, room_id, channel_id, potato_kind, heat_level, holder_user_id, turns, finished
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) ON CONFLICT (namespace, room_id, channel_id)
  DO UPDATE SET potato_kind = $4, heat_level = $5, holder_user_id = $6, turns = $7, finished = $8
  WHERE games.namespace = $1 AND games.room_id = $2 AND games.channel_id = $3
RETURNING namespace, room_id, channel_id, potato_kind, heat_level, holder_user_id, turns, finished, created_at
`

type UpsertGameParams struct {
	Namespace    string
	RoomID       string
	ChannelID    string
	PotatoKind   string
	HeatLevel    int32
	HolderUserID string
	Turns        int32
	Finished     bool
}

func (q *Queries) UpsertGame(ctx context.Context, arg UpsertGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, upsertGame,
		arg.Namespace,
		arg.RoomID,
		arg.ChannelID,
		arg.PotatoKind,
		arg.HeatLevel,
		arg.HolderUserID,
		arg.Turns,
		arg.Finished,
	)
	var i Game
	err := row.Scan(
		&i.Namespace,
		&i.RoomID,
		&i.ChannelID,
		&i.PotatoKind,
		&i.HeatLevel,
		&i.HolderUserID,
		&i.Turns,
		&i.Finished,
		&i.CreatedAt,
	)
	return i, err
}
